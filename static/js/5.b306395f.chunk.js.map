{"version":3,"sources":["components/FilterForm/FilterForm.js","components/Card/Card.js","commons/Pagination/Pagination.js","commons/Skeleton/SkeletonCard.js","components/CarList/CarList.js","routes/Home/Home.js","helpers/helpers.js"],"names":["FilterForm","dispatch","useDispatch","colorOptions","useSelector","selectColors","manuOptions","selectManufacturers","sort","selectSorting","color","selectColor","manufacturer","selectManufacturer","className","enableReinitialize","initialValues","onSubmit","values","a","changePage","changeColor","changeManufacturer","changeSorting","fetchCars","page","handleSubmit","handleChange","Form","Group","controlId","onChange","Label","Control","as","data-testid","defaultValue","value","data","map","option","key","capitalize","name","Button","type","size","CarCard","car","stockNumber","pictureUrl","modelName","fuelType","number","mileage","CardGroup","Card","src","alt","Body","Title","Text","to","Pagination","cars","selectCars","currentPage","selectCurrentPage","totalPageCount","isFirstPage","isLastPage","cx","onClick","params","decrementPage","incrementPage","SkeletonCard","Array","fill","el","i","style","paddingBottom","paddingTop","width","height","CarList","length","totalCarsCount","Home","colors","manufacturers","useEffect","isLoaded","fetchColors","fetchManufacturers","str","charAt","toUpperCase","slice"],"mappings":"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","file":"static/js/5.b306395f.chunk.js","sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport { changeColor, changeManufacturer, changeSorting, changePage } from '../../app/carsSlice';\nimport { fetchCars } from '../../app/asyncActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport Button from '@material-ui/core/Button';\nimport './FilterForm.scss';\nimport { capitalize } from '../../helpers/helpers';\nimport { selectColors, selectManufacturers, selectSorting, selectColor, selectManufacturer } from '../../app/selectors';\n\nconst FilterForm = () => {\n  const dispatch = useDispatch();\n  const colorOptions = useSelector(selectColors);\n  const manuOptions = useSelector(selectManufacturers);\n  const sort = useSelector(selectSorting);\n  const color = useSelector(selectColor);\n  const manufacturer = useSelector(selectManufacturer);\n  return (\n    <div className=\"form-container\">\n      <Formik\n        enableReinitialize={true}\n        initialValues={{\n          color,\n          manufacturer,\n          sort\n        }}\n        onSubmit={async (values) => {\n          dispatch(changePage(1));\n          dispatch(changeColor(values.color));\n          dispatch(changeManufacturer(values.manufacturer));\n          dispatch(changeSorting(values.sort));\n          dispatch(fetchCars({ ...values, page: 1 }));\n        }}\n      >\n        {({ handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"color\" onChange={handleChange}>\n              <Form.Label>Color</Form.Label>\n              <Form.Control as=\"select\" data-testid=\"select-color\" defaultValue={color}>\n                <option value='' data-testid=\"select-color-option\">All Car Colors</option>\n                {colorOptions.data.map(option => <option key={option} data-testid=\"select-color-option\" value={option}>{capitalize(option)}</option>)}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group controlId=\"manufacturer\" onChange={handleChange}>\n              <Form.Label>Manufacturer</Form.Label>\n              <Form.Control as=\"select\" defaultValue={manufacturer}>\n                <option value='' data-testid=\"select-manufacturer-option\">All Manufacturers</option>\n                {manuOptions.data.map(option => <option key={option.name} data-testid=\"select-manufacturer-option\" value={option.name}>{option.name}</option>)}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group controlId=\"sort\" onChange={handleChange}>\n              <Form.Label>Sort By</Form.Label>\n              <Form.Control as=\"select\" defaultValue={sort}>\n                <option value='' data-testid=\"select-sort-option\">None</option>\n                <option value='asc' data-testid=\"select-sort-option\">Mileage - Ascending</option>\n                <option value='des' data-testid=\"select-sort-option\">Mileage - Descending</option>\n              </Form.Control>\n            </Form.Group>\n            <div className=\"d-flex justify-content-end\"><Button type=\"submit\" className=\"form-button\" data-testid=\"form-button\"size=\"small\">Filter</Button></div>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default FilterForm;\n","import React from 'react';\nimport { Card, CardGroup } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst CarCard = ({ car: { stockNumber, pictureUrl, modelName, fuelType, mileage: { number }, color } }) => {\n  return (\n    <CardGroup>\n      <Card className=\"d-flex align-items-center\">\n        <div><img src={pictureUrl} className=\"card-image\" alt=\"Car Logo\"></img></div>\n        <Card.Body>\n          <Card.Title><h1>{modelName}</h1></Card.Title>\n          <Card.Text>Stock - # {stockNumber} - {number} KM - {fuelType} - {color}</Card.Text>\n          <Card.Text><Link to={`details/${stockNumber}`} className=\"details\" data-testid=\"view-details\">View Details</Link></Card.Text>\n        </Card.Body>\n      </Card>\n    </CardGroup>\n  );\n};\n\nexport default CarCard;\n\nCarCard.propTypes = {\n  car: PropTypes.shape({\n    color: PropTypes.string,\n    mileage: PropTypes.shape({\n      number: PropTypes.number\n    }),\n    fuelType: PropTypes.string,\n    modelName: PropTypes.string,\n    pictureUrl: PropTypes.string,\n    stockNumber: PropTypes.number\n  })\n};\n","import React from 'react';\nimport cx from 'classnames';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { incrementPage, decrementPage, changePage } from '../../app/carsSlice';\nimport { fetchCars } from '../../app/asyncActions';\nimport { selectCars, selectCurrentPage, selectManufacturer, selectColor, selectSorting } from '../../app/selectors';\n\nconst Pagination = () => {\n  const cars = useSelector(selectCars);\n  const currentPage = useSelector(selectCurrentPage);\n  const manufacturer = useSelector(selectManufacturer);\n  const sort = useSelector(selectSorting);\n  const color = useSelector(selectColor);\n  const { totalPageCount } = cars;\n  const dispatch = useDispatch();\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === totalPageCount;\n  const onNextClickHandler = () => {\n    !isLastPage && dispatch(incrementPage());\n    const params = {\n      manufacturer,\n      page: currentPage + 1,\n      color,\n      sort\n    };\n    !isLastPage && dispatch(fetchCars(params));\n  };\n  const onPreviousClickHandler = () => {\n    !isFirstPage && dispatch(decrementPage());\n    const params = {\n      manufacturer,\n      page: currentPage - 1,\n      color,\n      sort\n    };\n    !isFirstPage && dispatch(fetchCars(params));\n  };\n  const onFirstClickHandler = () => {\n    !isFirstPage && dispatch(changePage(1));\n    const params = {\n      manufacturer,\n      page: 1,\n      color,\n      sort\n    };\n    !isFirstPage && dispatch(fetchCars(params));\n  };\n\n  const onLastClickHandler = () => {\n    !isLastPage && dispatch(changePage(totalPageCount));\n    const params = {\n      manufacturer,\n      page: totalPageCount,\n      color,\n      sort\n    };\n    !isLastPage && dispatch(fetchCars(params));\n  };\n  return (\n    <div className=\"d-flex justify-content-center mt-3 mb-3\">\n      <span className={cx({ 'enabled-pagination': !isFirstPage, 'disabled-pagination': isFirstPage })} onClick={onFirstClickHandler} data-testid=\"first-button\">First</span>\n      <span className={cx({ 'enabled-pagination': !isFirstPage, 'disabled-pagination': isFirstPage })} onClick={onPreviousClickHandler} data-testid=\"previous-button\">Previous</span>\n      <span className=\"disabled-pagination\">Page {currentPage} of {totalPageCount}</span>\n      <span className={cx({ 'enabled-pagination': !isLastPage, 'disabled-pagination': isLastPage })} onClick={onNextClickHandler} data-testid=\"next-button\" >Next</span>\n      <span className={cx({ 'enabled-pagination': !isLastPage, 'disabled-pagination': isLastPage })} onClick={onLastClickHandler} data-testid=\"last-button\">Last</span>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport { Card, CardGroup } from 'react-bootstrap';\nimport Skeleton from 'react-loading-skeleton';\n\nconst SkeletonCard = () => {\n  return new Array(10).fill(0).map((el, i) => (\n    <CardGroup key={i} >\n      <Card style={{ paddingBottom: '16px', paddingTop: '16px' }}>\n        <Skeleton width={104} height={90}/>\n        <Card.Body className=\"d-flex flex-column ml-3\">\n          <Skeleton width={95} height={28} />\n          <Skeleton width={170} height={28} />\n          <Skeleton width={100} height={28} />\n        </Card.Body>\n      </Card>\n    </CardGroup>\n  ));\n};\n\nexport default SkeletonCard;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CarCard from '../Card/Card';\nimport './CarList.scss';\nimport Pagination from '../../commons/Pagination/Pagination';\nimport SkeletonCard from '../../commons/Skeleton/SkeletonCard';\nimport { selectCars } from '../../app/selectors';\n\nconst CarList = () => {\n  const cars = useSelector(selectCars);\n  return (\n    <div className=\"list-container\">\n      <h1>Available Cars</h1>\n      <p>Showing {cars.data.length || 10} of {cars.totalCarsCount} Results</p>\n      <div>{cars.data.length > 0 ? cars.data.map(car => <CarCard key={`${car.mileage.number}-${car.stockNumber}`} car={car} />) : <SkeletonCard/> }</div>\n      <Pagination/>\n    </div>\n  );\n};\n\nexport default CarList;\n","import React, { useEffect } from 'react';\nimport { fetchColors, fetchManufacturers, fetchCars } from '../../app/asyncActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FilterForm from '../../components/FilterForm/FilterForm';\nimport CarList from '../../components/CarList/CarList';\nimport './Home.scss';\nimport { selectColors, selectManufacturers, selectCars } from '../../app/selectors';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const colors = useSelector(selectColors);\n  const manufacturers = useSelector(selectManufacturers);\n  const cars = useSelector(selectCars);\n\n  useEffect(() => {\n    const params = {\n      page: 1\n    };\n    !colors.isLoaded && dispatch(fetchColors());\n    !manufacturers.isLoaded && dispatch(fetchManufacturers());\n    !cars.isLoaded && dispatch(fetchCars(params));\n  }, []\n  );\n  return <div className=\"home-content\">\n    <FilterForm/>\n    <CarList/>\n  </div>;\n};\n\nexport default Home;\n","export const capitalize = (str) => {\n  if (typeof str !== 'string') return '';\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n"],"sourceRoot":""}